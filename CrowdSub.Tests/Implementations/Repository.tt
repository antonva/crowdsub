<#@ include file="..\\CodeSecond.ttinclude"#>
<#@ output extension=".txt"#>
<#
WriteHeader(codeStringGenerator, fileManager);

foreach (var entity in entities)
{
	var escapedEntityName = code.Escape(entity);
	var repositoryName = escapedEntityName + "Repository";

	var schema = string.Empty;

	if (defaultSchema != "dbo" && !string.IsNullOrEmpty(defaultSchema))
		schema = string.Format("{0}.", defaultSchema);

    fileManager.StartNewFile(repositoryName + ".partial.cs");
    BeginNamespace(code);
#>
using System;
using System.Collections;
using System.Collections.Generic;
using System.Data;
using System.Data.Entity;
using System.Data.SqlClient;
using System.Linq;
using <#=escapedNamespace.Replace("Implementations", "Models")#>;

public partial class <#=repositoryName#> : IDbSet<<#=escapedEntityName#>>
{
    private readonly DbContext _dbContext;
    private readonly DbSet<<#=escapedEntityName#>> _dbSet;

    internal <#=repositoryName#>(DbContext dbContext, DbSet<<#=escapedEntityName#>> dbSet)
    {
		_dbContext = dbContext;
		_dbSet = dbSet;
    }
    
	public <#=escapedEntityName#> Add(<#=escapedEntityName#> entity)
	{
 		return _dbSet.Add(entity);
	}

	public <#=escapedEntityName#> Attach(<#=escapedEntityName#> entity)
	{
 		return _dbSet.Attach(entity);
	}

	public <#=escapedEntityName#> Create()
	{
 		return _dbSet.Create();
	}

    TDerivedEntity IDbSet<<#=escapedEntityName#>>.Create<TDerivedEntity>()
    {
        return _dbSet.Create<TDerivedEntity>();
    }

	public <#=escapedEntityName#> Find(params object[] keyValues)
	{
 		return _dbSet.Find(keyValues);
	}

	public System.Collections.ObjectModel.ObservableCollection<<#=escapedEntityName#>> Local
	{
		get { return _dbSet.Local; }
	}

	public <#=escapedEntityName#> Remove(<#=escapedEntityName#> entity)
	{
		return _dbSet.Remove(entity);
	}

    public Type ElementType
    {
        get { return ((IQueryable)_dbSet).ElementType; }
    }

    public System.Linq.Expressions.Expression Expression
    {
        get { return ((IQueryable)_dbSet).Expression; }
    }

    public System.Linq.IQueryProvider Provider
    {
        get { return ((IQueryable)_dbSet).Provider; }
    }

    public IEnumerator<<#=escapedEntityName#>> GetEnumerator()
    {
        return ((IEnumerable<<#=escapedEntityName#>>) _dbSet).GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return ((IEnumerable) _dbSet).GetEnumerator();
    }

	public void BulkInsert(IEnumerable<<#=escapedEntityName#>> entities)
	{
        using (var bulkCopy = new SqlBulkCopy(_dbContext.Database.Connection.ConnectionString))
        {
			bulkCopy.BatchSize = 1000;
			bulkCopy.DestinationTableName = "<#=schema#><#=repositoryName#>";

			var table = new DataTable();
<#
	var propCount = 0;
	foreach (var property in entity.Properties)
	{
		var generationOption = GetGenerationOption(property, entity);
		if (!string.IsNullOrEmpty(generationOption) || entity.KeyMembers.Contains(property)) continue;

		if (property.TypeUsage.EdmType is ComplexType)
		{
			foreach (var member in ((ComplexType)property.TypeUsage.EdmType).Members)
			{
				propCount++;
				var propName = property.Name + "_" + member.Name;
#>
			bulkCopy.ColumnMappings.Add("<#=propName#>", "<#=propName#>");
			table.Columns.Add("<#=propName#>");
<#
			}
		} else {
			propCount++;
#>
			bulkCopy.ColumnMappings.Add("<#=property.Name#>", "<#=property.Name#>");
			table.Columns.Add("<#=property.Name#>");
<#
		}
	}
#>

			foreach (var entity in entities)
			{
				table.Rows.Add(
<#
	var index = 0;
	foreach (var property in entity.Properties)
	{
		var generationOption = GetGenerationOption(property, entity);
		if (!string.IsNullOrEmpty(generationOption) || entity.KeyMembers.Contains(property)) continue;
		if (property.TypeUsage.EdmType is ComplexType)
		{
			foreach (var member in ((ComplexType)property.TypeUsage.EdmType).Members)
			{
				index++;
				var comma = (index == propCount) ? string.Empty : ",";
#>
					entity.<#=property.Name#>.<#=member.Name#><#=comma#>
<#
			}
		} else {
			index++;
			var comma = (index == propCount) ? string.Empty : ",";
#>
					entity.<#=property.Name#><#=comma#>
<#
		}
	}
#>
				);
			}

			bulkCopy.WriteToServer(table);
		}
	}
}

<#
    EndNamespace(code);
}

fileManager.Process();
#>